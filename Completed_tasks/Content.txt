01: js введение. переменные, типы данных, диалоговые окна, лямбда ф-ции, интерполяция строк. 
	ф-ция принимающяа массив параметров любого типа, 
02: Событийный цикл (принцип работы js), разбитие тяжелых задач. setInterval / setTimeoutю 
	Объекты. Опциональная цепочка ? (безопасный способ доступа к свойствам вложенных объектов)
	Массивы (ф-ции для работы с массивами) например: для массива: ф-ция форыч для массива, выборка элементов по условию типа Where() в c#, трансформацию элементов типа Select() в c# (например нужно все элементы массива умножить на 2) и т.д.
	Строки - поиск подстроки по индексу, вставка слова в нужное место в строке по индексу (ф-ция),  вставка строки после нужного слова или символа (ф-ция)
	Дата - получить следующую дату после введенной
03: OOП. Классы (старый и новый вариант) геттеры, сеттеры, ф-ции
	Деструктурирующее присваивание – это специальный синтаксис, который позволяет нам «распаковать» массивы или объекты в кучу переменных, так как иногда они более удобны. 
	наследование. instanceof - помогает проверить, относится ли один объект к другому 
	generate random value
04: События, подписка на события по клику и т.д. (динамическая/статическая подписка), 
	методы выбора элементов с html-документа, установка стилей для элементов с js
	Преревод коллекции в массив https://learn.javascript.ru/traversing-dom#kollektsii-ne-massivy
05: Всплытие событий (события родителя и ребенка происходят в разном порядке, тут о смене порядка и об отключании каких-то не нужных). Вызов события из события
	Drag and drop
	Map и Set - словарь и массив только для уникальных значений. Убитаем с массива чисел или строк повторяющиеся элементы
06: Хранение данных. session storage,  local storage, cookie. 
	JSON - преобразование объекта в JSON и обратно.  
	Изпользование local storage для хранения ланных, Изпользование Cookie
07: Формы. Регулярные выражения. Валидация формы при помощи регулярных выражений, валидация email, password, ввод в инпут только цифр и клавиши Backspace 
		AJAX, API для получение фейковых объектов
08 Exam: Theory: fetch - запросы без промисов, автовызывающаяся ф-ция, разбивка проекта по файлам используя модули, получение юзеров с рлейсхолдера и размещение их в бутстраповском списке ul, с кликом по ним и отобращением инфо о них в отдельном блоке
	 Practice: Сайт погоды используя API openweathermap (https://openweathermap.org/) и промисы
09 Exam pro: то же что и Exam только разбит нормально по файлам (используя модули. import, export)
10: jquery-плагины. Где взять, как встроить. 
	подробный зазбор плагина выбора даты или врмени, круовые прогресс бары, красивый поиск (на всю страницу - в практике (ссылка в списке плагинов в задании))
11: ТypeScript. В файле index.html:
	1) ts starter - готовый настроенный проект для начала работы с typeScript (инструкция в index.html)
 	2) установка axiox, jquery, npm, webpack
	4) Описание файлов стартера
	А так же в лекции: разбивка файлов для typeScript, работа через итерфейсы (преобразовываем объект с api к интерфейсу), сервис для localStorage, авторизация пользователя в системе, взаимодействие с юай по новой структуре
    Практика - прогноз погоды с экзамена на ТypeScript (для запуска, сначала установить недостающие пакеты - npm i -> npm start -> go to localhost:9000)
12: ТypeScript. Более удобная запись класса (Автоматически и создание этих полей  внутри класса и их инициализация), геттеры 